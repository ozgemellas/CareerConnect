# -*- coding: utf-8 -*-
"""CareerConnect.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kIf9g3yZqyVDA7KnjUYgeUe5yER4hpGE
"""

pip install --upgrade iointel marvin nest_asyncio



import nest_asyncio
nest_asyncio.apply()

import os
import asyncio
import time
import ssl
import smtplib
import datetime
from iointel import Agent
from email.message import EmailMessage

from config import sender_email, sender_password, openai_api_key

nest_asyncio.apply()


# 2- Kullanıcı Profili
user_profile = {
    "name": "Ahmet Yılmaz",
    "field_of_interest": ["Artificial Intelligence", "Machine Learning", "Computer Vision"],
    "skills": ["Python", "TensorFlow", "Data Analysis"],
    "experience": "Completed internships at ABC Tech and XYZ AI Labs, with 2 research papers published on machine learning."
}

# 3- Firma Profilleri
company_profiles = [
    {
        "company_name": "VisionAI Technologies",
        "focus_areas": ["Computer Vision", "Autonomous Systems"],
        "open_positions": ["AI Research Intern"],
        "contact_email": "hr@visionai.com"
    },
    {
        "company_name": "DeepMind Innovations",
        "focus_areas": ["General AI", "Reinforcement Learning"],
        "open_positions": ["Machine Learning Engineer"],
        "contact_email": "careers@deepmindinnovations.com"
    },
    {
        "company_name": "NeuralCore Solutions",
        "focus_areas": ["Edge AI", "Computer Vision"],
        "open_positions": ["Computer Vision Specialist"],
        "contact_email": "jobs@neuralcore.com"
    }
]

# 4- Agent Oluştur (OPENAI API KEY Dikkat!)
os.environ["OPENAI_API_KEY"] = openai_api_key

agent = Agent(
    name="Job Match Agent",
    instructions="You are an assistant specialized in creating highly personalized and professional job application emails based on the given user and company profiles.",
    model="meta-llama/Llama-3.3-70B-Instruct",
    api_key=os.getenv("OPENAI_API_KEY"),
    base_url="https://api.intelligence.io.solutions/api/v1"
)

# 5- Email Gönderme Fonksiyonu (Retry + Loglama Dahil)
def send_email(to_email, subject, body, attachment_path=None, max_retries=3, wait_seconds=5):
    retries = 0

    while retries <= max_retries:
        try:
            message = EmailMessage()
            message["From"] = sender_email
            message["To"] = to_email
            message["Subject"] = subject
            message.set_content(body)

            # Ek Dosya Ekleme
            if attachment_path:
                with open(attachment_path, "rb") as f:
                    file_data = f.read()
                    file_name = os.path.basename(attachment_path)
                message.add_attachment(file_data, maintype="application", subtype="pdf", filename=file_name)

            context = ssl.create_default_context()

            with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
                server.login(sender_email, sender_password)
                server.send_message(message)

            print(f"✅ Email gönderildi --> {to_email} (Ek dosyayla)")

            # Başarılı Gönderim Logu
            with open("email_log.txt", "a", encoding="utf-8") as log_file:
                log_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                log_file.write(f"[{log_time}] Email sent to: {to_email} | Subject: {subject}\n")

            return  # Başarılı gönderimde fonksiyondan çık

        except Exception as e:
            retries += 1
            print(f"⚠️  {retries}. denemede hata oluştu --> {to_email}: {e}")

            if retries > max_retries:
                print(f"❌ Email gönderilemedi --> {to_email}: {e}")
                with open("email_error_log.txt", "a", encoding="utf-8") as error_log:
                    error_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    error_log.write(f"[{error_time}] FAILED to {to_email} | Error: {str(e)}\n")
            else:
                time.sleep(wait_seconds)  # Sonraki deneme için bekle

# 6- Main Fonksiyon
async def main():
    attachment_path = "cv.pdf"  # <-- CV dosya adı

    for company in company_profiles:
        # Kullanıcı + Firma bilgileri ile prompt oluştur
        text = f"""
User Profile:
- Name: {user_profile['name']}
- Field of Interest: {', '.join(user_profile['field_of_interest'])}
- Skills: {', '.join(user_profile['skills'])}
- Experience: {user_profile['experience']}

Company Profile:
- Company Name: {company['company_name']}
- Focus Areas: {', '.join(company['focus_areas'])}
- Open Positions: {', '.join(company['open_positions'])}
"""
        # Agent ile başvuru metni üret
        result = agent.run(prompt=text)
        print(f"Başvuru Mektubu ({company['company_name']}):")
        print(result)
        print("="*80)

        # Email bilgileri
        to_email = company['contact_email']
        subject = f"Application for {company['open_positions'][0]} Position"
        body = result

        # Email gönder (hatalar yönetiliyor)
        send_email(to_email, subject, body, attachment_path)

# 7- Programı Başlat
await main()
